%prelude {
#include <stdlib.h>
#include <stdio.h>
#include "SymbolTableHandler.h"
#include "OutputHandler.h"
#include "Utility.h"
#include "yystype.h"

int arrDecNumber = 0;
int arrDecProduction = 1;

int arrCmptProduction = 1;

Array parametersArray;

char* variableType;

int useOfArrayVar = 0;

int useOfResVar = 0;

char* VariableName;

}

%token CHAR, STRING, TRUEV, FALSEV, ID_CODE, INTNUMBER, REALNUMBER, NOTEQUAL, NOT, LESSOREQUAL, LESSTHAN, BIGGEROREQUAL, BIGGERTHAN, EQUAL, ASSIGNMENT, DECREMENT, SUBUNARYMINUS, INCREMENT, ADDUNARYPLUS, DIV, PRODUCTION, MOD, LOGICALAND, ARITHMETICAND, LOGICALOR, ARITHMETICOR, XOR, OPENCURLYBRACE, CLOSECURLYBRACE, OPENINGBRACE, CLOSINGBRACE, OPENINGPAREBTHESIS, CLOSINGPAREBTHESIS, COMMA, SEMICOLON, COLON, BOOLEAN, BREAK, CASE, CHARKEYWORD, CONST, CONTINUE, DEFAULT, DOUBLE, ELSE, EXTERN, FUNCTION, FLOAT, FOR, GOTO, IF, INPUT, INT, LONG, OUTPUT, RETURN, SIZEOF, STATIC, STRINGKEYWORD, SWITCH, VOID, AUTO, RECORD, REPEAT, PROCEDURE, FOREACH, OF, IN, UNTIL;

program :
  %prelude { PrepareST(); }
  { printf("Find"); } program_parts
| { printf("Find"); } program_parts program
;

program_parts :
  var_dcl
| func_proc { printf("Find"); }
| struct_dec
;

func_proc :
  func_dcl<x> { HandleCodeGenerator("END", x.str, "", ""); }
| proc_dcl
| extern_dcl
;

arguments :
  argument
| argument COMMA arguments
;


array_dcl<n> :
	%prelude { int simpleArray = 1; }
  null_point { if (arrDecNumber == 0) { n->num = 0; } else { if (simpleArray == 1) { n->num = 1; } else { n->num = arrDecProduction; arrDecProduction = 1; } } arrDecNumber = 0; }
| OPENINGBRACE CLOSINGBRACE { arrDecNumber++; simpleArray = 1; } array_dcl<m>
| OPENINGBRACE INTNUMBER<x> CLOSINGBRACE { arrDecNumber++; simpleArray = 0; arrDecProduction = arrDecProduction * x.num; } array_dcl<m>
;

argument :
	%prelude { int check = 0; char *arrSize1; }
  type<x> ID_CODE<y> { char* str6 = Lookup(y.str); if ((str6 != NULL) && (str6[0] != '\0')) { AddId(y.str,x.str); } else { ErrorPrump_IdDuplicated(1,y.str); } } array_dcl<z> { char* sizex; if (z.num == 0) { sizex = GetSizeOf(x.str); HandleCodeGenerator("ARG", sizex, y.str, ""); } else { sizex = GetSizeOf(x.str); arrSize1 = Int2String(z.num); HandleCodeGenerator("ARG", sizex, arrSize1, y.str); } }
;

func_dcl<n> :
  type<x> ID_CODE<y> { printf("FUNDCL"); char* str = Lookup(y.str); if ((str != NULL) && (str[0] != '\0')) { AddId(y.str,x.str); char* size = GetSizeOf(x.str); HandleCodeGenerator("FUN", y.str, size, ""); } else { ErrorPrump_IdDuplicated(1,y.str); } printf("DD"); } OPENINGPAREBTHESIS ( arguments )? CLOSINGPAREBTHESIS SEMICOLON { n->str = y.str; }
| type<x> ID_CODE<y> { char* str = Lookup(y.str); if ((str != NULL) && (str[0] != '\0')) { AddId(y.str,x.str); char* size = GetSizeOf(x.str); HandleCodeGenerator("FUN", y.str, size, ""); } else { ErrorPrump_IdDuplicated(1,y.str); } } OPENINGPAREBTHESIS ( arguments )? CLOSINGPAREBTHESIS block<m> { n->str = y.str; }
;

extern_dcl :
  EXTERN type<x> ID_CODE<y> { char* str = Lookup(y.str); if ((str != NULL) && (str[0] != '\0')) { AddId(y.str,x.str); } else { ErrorPrump_IdDuplicated(1,y.str); } } SEMICOLON
;

proc_dcl :
  PROCEDURE ID_CODE OPENINGPAREBTHESIS ( arguments )? CLOSINGPAREBTHESIS SEMICOLON
| PROCEDURE ID_CODE OPENINGPAREBTHESIS ( arguments )? CLOSINGPAREBTHESIS block<m>
;

type<n> :
  INT { n->str = "int"; }
| BOOLEAN { n->str = "bool"; }
| FLOAT { printf("FLOATFIND"); n->str = "float"; }
| LONG { n->str = "long"; }
| CHARKEYWORD { n->str = "char"; }
| DOUBLE { n->str = "double"; }
| ID_CODE<m> { n->str = m.str; } 
| STRINGKEYWORD { n->str = "char *"; }
| VOID { n->str = "void"; }
| AUTO { n->str = "auto"; }
;

var_dcl :
  %prelude { int i = 0; }
  ( CONST { i = 1; } )? type<x> { variableType = x.str; } var_dcl_cnts SEMICOLON
;

var_dcl_cnts :
  var_dcl_cnt
| var_dcl_cnt COMMA var_dcl_cnts
;
    
var_dcl_cnt :
  assignment_expr<m>
| variable<x> { char* str4 = Lookup(x.str); if ((str4 != NULL) && (str4[0] != '\0')) { AddId(x.str,variableType); char* size = GetSizeOf(variableType); if (useOfArrayVar == 0) { HandleCodeGenerator("VAR", size, x.str, ""); } else { HandleCodeGenerator("ARR", size, Int2String(arrCmptProduction), x.str); arrCmptProduction = 1; useOfArrayVar = 0; } } else { ErrorPrump_IdDuplicated(1,x.str); } } 
;

struct_dec :
  RECORD ID_CODE<x> { char* str = Lookup(x.str); if ((str != NULL) && (str[0] != '\0')) { AddId(x.str,"REC"); } else { ErrorPrump_IdDuplicated(1,x.str); } } OPENCURLYBRACE var_dcl CLOSECURLYBRACE SEMICOLON
;

block<n> :
  OPENCURLYBRACE { EnterScope(); } ( ( var_dcl | statement_expr ) )* CLOSECURLYBRACE { ExitScope(); n->str = ProduceBlockLabel(); }
;

arithmatic_low_level<n> :
  ADDUNARYPLUS<x> { n->str = x.str; }
| SUBUNARYMINUS<x> { n->str = x.str; }
;

arithmatic_high_level<n> :
  PRODUCTION<x> { n->str = x.str; }
| DIV<x> { n->str = x.str; }
| MOD<x> { n->str = x.str; }
| ARITHMETICAND<x> { n->str = x.str; }
| ARITHMETICOR<x> { n->str = x.str; }
| XOR<x> { n->str = x.str; }
| LOGICALOR<x> { n->str = x.str; }
| LOGICALAND<x> { n->str = x.str; }
;

arithmatic<n> :
  ADDUNARYPLUS<x> { n->str = x.str; }
| SUBUNARYMINUS<x> { n->str = x.str; }
| PRODUCTION<x> { n->str = x.str; }
| DIV<x> { n->str = x.str; }
| MOD<x> { n->str = x.str; }
| ARITHMETICAND<x> { n->str = x.str; }
| ARITHMETICOR<x> { n->str = x.str; }
| XOR<x> { n->str = x.str; }
| LOGICALOR<x> { n->str = x.str; }
| LOGICALAND<x> { n->str = x.str; }
;

conditional<n> :
  EQUAL<x> { n->str = x.str; }
| NOTEQUAL<x> { n->str = x.str; }
| BIGGEROREQUAL<x> { n->str = x.str; }
| LESSOREQUAL<x> { n->str = x.str; }
| LESSTHAN<x> { n->str = x.str; }
| BIGGERTHAN<x> { n->str = x.str; }
;

binary_op<n> :
  arithmatic<x> { n->str = x.str; }
| conditional<x> { n->str = x.str; }
;

parameters<n> :
  expr<x> { insertArray(&parametersArray, x.str); n->str = ProduceParameters(&parametersArray); freeArray(&parametersArray); }
| expr<x> { insertArray(&parametersArray, x.str); } COMMA parameters<m>
;

method_call_expr :
	%prelude { int hasParameters = 0; }
  ID_CODE<x> OPENINGPAREBTHESIS ( { initArray(&parametersArray, 5); } parameters<y> { hasParameters = 1; } )? CLOSINGPAREBTHESIS { if(hasParameters == 0) { HandleCodeGenerator("CALL",x.str,"",""); } else { HandleCodeGenerator("CALL",x.str,y.str,""); } }
;

array_complete_dcl<n> :
  OPENINGBRACE expr<x> CLOSINGBRACE { n->num = arrCmptProduction * x.num; }
| OPENINGBRACE expr<x> CLOSINGBRACE { arrCmptProduction = arrCmptProduction * x.num; } array_complete_dcl<y> 
;

variable<n> :
  ID_CODE<x> { char * str = Lookup(x.str); if ((str != NULL) && (str[0] != '\0')) { ErrorPrump_IdNotFound(1,x.str); } else { n->str = x.str; } }
| ID_CODE<x> { char * str = Lookup(x.str); if ((str != NULL) && (str[0] != '\0')) { ErrorPrump_IdNotFound(1,x.str); } else { n->str = x.str; } } array_complete_dcl<y> { useOfArrayVar = 1; n->str = x.str; }
| DECREMENT variable<m>
| INCREMENT variable<m>
| variable<m> DECREMENT
| variable<m> INCREMENT
;

const_val<n> :
  INTNUMBER<x> { n->num = x.num; }
| REALNUMBER<x> { n->numf = x.numf; n->num = x.num; }
| CHAR<x> { n->num = x.num; }
| BOOLEAN<x> { n->num = x.num; }
| STRING<x> { n->num = x.num; }
;

assignment_expr<n> :
  variable<x> { printf("AE"); useOfResVar = 1; VariableName = x.str; } ASSIGNMENT expr<y> { HandleCodeGenerator("=",x.str,y.str,""); useOfResVar = 0; }
;

expr_assign :
  expr<m>
| assignment_expr<m>
;

loop_stmt :
  FOR OPENINGPAREBTHESIS ( var_dcl )? SEMICOLON expr<k> SEMICOLON ( expr_assign )? CLOSINGPAREBTHESIS block<l>
| REPEAT block<m> UNTIL OPENINGPAREBTHESIS expr<l> CLOSINGPAREBTHESIS SEMICOLON
| FOREACH OPENINGPAREBTHESIS ID_CODE<y> { char* str2 = Lookup(y.str); if ((str2 != NULL) && (str2[0] != '\0')) { AddId(y.str,"VAR"); } else { ErrorPrump_IdDuplicated(1,y.str); } } IN ID_CODE<z> { char * str1 = Lookup(z.str); if ((str1 != NULL) && (str1[0] != '\0')) { ErrorPrump_IdNotFound(1,z.str); } } CLOSINGPAREBTHESIS block<f>
;

expr<n> :
  expr<x> conditional<m> expr<y>
| OPENINGPAREBTHESIS expr<y> CLOSINGPAREBTHESIS
| method_call_expr
| variable<x> { n->str = x.str; }
| const_val<m>
| SUBUNARYMINUS expr<m>
| NOT expr<m>
;

cond_statement :
  IF OPENINGPAREBTHESIS expr<x> CLOSINGPAREBTHESIS block<y> { char* blockLabel = UseOfBlockLabel(); HandleCodeGenerator("JNZ",blockLabel,x.str,""); } ( ELSE block<z> { char* blockLabel = UseOfBlockLabel(); HandleCodeGenerator("JZ",blockLabel,z.str,""); } )?
| SWITCH OPENINGPAREBTHESIS ID_CODE<x> CLOSINGPAREBTHESIS OF COLON OPENCURLYBRACE { EnterScope(); } ( CASE INTNUMBER<y> COLON block<z> )* DEFAULT COLON block<m> CLOSECURLYBRACE { ExitScope(); }
;

gotofunc :
  GOTO ID_CODE<x> { HandleCodeGenerator("JMP",x.str,"",""); }
;

labeltoken :
  ID_CODE<x> COLON { HandleCodeGenerator("LB",x.str,"",""); }
;

statement_expr :
  assignment_expr<m> SEMICOLON
| cond_statement
| loop_stmt
| method_call_expr SEMICOLON
| RETURN { int i = 0; } ( expr<x> { i = 1; } )? SEMICOLON { if(i == 0) { HandleCodeGenerator("RET",x.str,"",""); } else { HandleCodeGenerator("RET","","",""); } }
| gotofunc SEMICOLON
| labeltoken
| BREAK SEMICOLON
| CONTINUE SEMICOLON
| SIZEOF OPENINGPAREBTHESIS type<m> CLOSINGPAREBTHESIS SEMICOLON
;

null_point :

;
